---
title: "Google Analytics Report with .NET Core"
date: 2020-11-07T10:00:00Z
description: "Build Google Analytics Report from C#. Simple .NET Core example project."
categories: [".NET Core", "Google Analytics"]
dropCap: true
displayInMenu: false
displayInList: true
draft: false
resources:
- name: featuredImage
  src: "ga-report-sharp-image.png"
---

Изучение Google Analytics Reporting API стоит начать с официальной документации:

https://developers.google.com/analytics/devguides/reporting/core/v4
https://developers.google.com/api-client-library/dotnet/get_started


Если вам нужно получить доступ к отчетам Google Analytics из C#, сделать это можно используя библиотеку от Google.
Создайте консольный .NET Core проект, и подключите к нему nuget-пакет "Google.Apis.AnalyticsReporting.v4".


Чтобы иметь возможность обратиться к данным отчетов Google Analytics, вам будет нужно создать приложение 
в консоли https://console.developers.google.com/
Если это проект для личного применения, вы можете не переживать о том, чтобы заполнить все поля: браузер выдаст 
вам предупреждение, но вы сможете пройти далее и разрешить доступ.

![OAuth screen setup](oauth-content-screen.png "OAuth screen setup for Google Analytics report")

Пункт **"Prepare for verification"** стоит выполнить, если вы делаете проект для публичного использования (не ваш личный).

Перейдите в раздел **"Credentials"**, и скачайте файл-секрет **client_secret_XXXX.apps.googleusercontent.com.json**:
![Download json secret file](download-client-secret-json.png "Google Analytics json secret file")

Даже если это тест-проект, я рекомендую не включать явно такой файл в него (чтобы случайно не закоммитить на github),
а разместить его в отдельной папке на машине. В примере ниже используется специальная переменная среды, которая хранит
путь к файлу-секрету.


Зайдите в административную панель Google Analytics, и скопируйте View ID - он будет нужен для программного построения отчета:

![Google Analytics View ID for your report](analytics-view-id.png "Google Analytics view ID")

## Example project on GitHub

In my repository [https://github.com/AndrewSalko/kawaii.ga.analyser](https://github.com/AndrewSalko/kawaii.ga.analyser) you will find an example project. 
Ниже я опишу отдельные моменты.

## Using OAuth to access API

Я поместил в "секретную папку" на машине файл **client_secret_XXXX.apps.googleusercontent.com.json**, а полный путь
к нему в переменную среды. Ниже я его вычитываю, и использую метод **AuthorizeAsync**:


```csharp
string jsonAPIFile = Environment.GetEnvironmentVariable(ENV_VAR_JSON_SECRET_FILE);
if (string.IsNullOrEmpty(jsonAPIFile))
{
	Console.WriteLine("Environment variable not found:" + ENV_VAR_JSON_SECRET_FILE);
}

UriBuilder uri = new UriBuilder(Assembly.GetExecutingAssembly().CodeBase);
string startPath = Path.GetDirectoryName(Uri.UnescapeDataString(uri.Path));

string jsonAPIAuth = Path.Combine(startPath, jsonAPIFile);

UserCredential credential;

using (var stream = new FileStream(jsonAPIAuth, FileMode.Open, FileAccess.Read))
{
	string credPath = Path.Combine(startPath, "creds.json");

	credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
						GoogleClientSecrets.Load(stream).Secrets,
						_SCOPES,
						"user",
						CancellationToken.None,
						new FileDataStore(credPath, true)).Result;
}

var init = new BaseClientService.Initializer
{
	ApplicationName = "kawaiimobile-ga2",
	HttpClientInitializer = credential
};

var service = new Google.Apis.AnalyticsReporting.v4.AnalyticsReportingService(init);

```
Объект **AnalyticsReportingService service** мы используем для получения отчетов.

В файле [VisitedPagesReportBuilder.cs](https://github.com/AndrewSalko/kawaii.ga.analyser/blob/master/kawaii.ga.analyser/PagesReport/VisitedPagesReportBuilder.cs) можно увидеть подробности.

Для отчета о посещениях страниц нам необходим диапазон дат и набор метрик:

```csharp

// Create the DateRange object.
DateRange dateRange = new DateRange()
{
	StartDate = ReportDate.GetDateAsString(startDate),
	EndDate = ReportDate.GetDateAsString(endDate)
};

// Create the Metrics object.

Metric pageViewsMetric = new Metric { Expression = "ga:pageviews", Alias = "Page views" };
Metric uniquePageViewsMetric = new Metric { Expression = "ga:uniquePageviews", Alias = "Unique page views" };
Metric entrancesMetric = new Metric { Expression = "ga:entrances", Alias = "Entrances" };

//Create the Dimensions object.
Dimension dimensionPage = new Dimension { Name = "ga:pagePath" };

OrderBy order = new OrderBy
{
	FieldName = "ga:pageviews",
	SortOrder = "DESCENDING"
};
```
Используйте https://ga-dev-tools.appspot.com/dimensions-metrics-explorer/ для изучения возможных метрик.

## Report request

```csharp
ReportRequest reportRequest = new ReportRequest
{
	ViewId = _GAViewID,
	DateRanges = new List<DateRange>() { dateRange },
	Dimensions = new List<Dimension>() { dimensionPage },
	Metrics = new List<Metric>() { pageViewsMetric, uniquePageViewsMetric, entrancesMetric },
	OrderBys = new List<OrderBy> { order },
	PageToken = nextPageToken
};

List<ReportRequest> requests = new List<ReportRequest>();
requests.Add(reportRequest);

// Create the GetReportsRequest object.
GetReportsRequest getReport = new GetReportsRequest() { ReportRequests = requests };

// Call the batchGet method.
GetReportsResponse response = _Service.Reports.BatchGet(getReport).Execute();
```
Цикл получения данных. Вам нужно будет парсить и приводить к определенным типам результаты:

```csharp
var report = response.Reports[0];
var rows = report.Data.Rows;

foreach (var row in rows)
{
	string url = row.Dimensions[0];

	string valPageViews = row.Metrics[0].Values[0];
	string valUniqPageViews = row.Metrics[0].Values[1];
	string valEntrances = row.Metrics[0].Values[2];

	int pageViews = int.Parse(valPageViews);
	int uniqPageViews = int.Parse(valUniqPageViews);
	int entrances = int.Parse(valEntrances);

	var reportRow = new VisitedPagesReportRow(url, pageViews, uniqPageViews, entrances);
	reportRows.Add(reportRow);

}//foreach
```
В целом, построение отчетов Google Analytics программным образом - задача достаточно несложная, но 
содержит ряд важных для понимания моментов - регистрация приложения через [консоль Google](https://console.developers.google.com),
а также изучение возможных метрик через [Dimensions & Metrics Explorer](https://ga-dev-tools.appspot.com/dimensions-metrics-explorer).




